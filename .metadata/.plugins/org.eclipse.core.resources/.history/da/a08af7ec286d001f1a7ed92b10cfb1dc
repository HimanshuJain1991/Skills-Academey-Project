package com.rays.ctl;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.rays.common.BaseCtl;
import com.rays.common.ORSResponse;
import com.rays.common.attachment.AttachmentDTO;
import com.rays.common.attachment.AttachmentServiceInt;
import com.rays.dto.UserDTO;
import com.rays.form.UserForm;
import com.rays.service.UserServiceInt;

@RestController
@RequestMapping(value = "User")
public class UserCtl extends BaseCtl<UserDTO, UserForm, UserServiceInt> {
	@Value("${page.size}")
	protected int pageSize;

	@PostMapping("save")
	public ORSResponse save(@RequestBody @Valid UserForm form, BindingResult bindingResult) {
		ORSResponse res = validate(bindingResult);
		if (!res.isSuccess()) {
			return res;
		}
		UserDTO dto = (UserDTO) form.getDto();
		if (dto.getId() != null && dto.getId() > 0) {
			baseService.update(dto);
			res.addMessage("data updated");
			res.addData(dto.getId());

		} else {
			Long id = baseService.add(dto);
			res.addMessage("Data Saved");
			res.addData(dto.getId());
		}
		return res;
	}

	@GetMapping(value = "get/{id}")
	public ORSResponse get(@PathVariable Long id) {
		UserDTO dto = baseService.findByPk(id);
		ORSResponse res = new ORSResponse(true);
		res.addData(dto);
		return res;
	}

	@GetMapping(value = "delete/{id}")
	public ORSResponse delete(@PathVariable Long id) {
		baseService.delete(id);
		ORSResponse res = new ORSResponse(true);
		res.addMessage("Data Deleted Successfully");
		return res;
	}

	@RequestMapping(value = "search/{pageNo}", method = { RequestMethod.GET, RequestMethod.POST })
	public ORSResponse search(@RequestBody UserForm form, @PathVariable int pageNo) {
		System.out.println("search metho calling...");
		ORSResponse res = new ORSResponse(true);
		UserDTO dto = (UserDTO) form.getDto();
		List list = baseService.search(dto, pageNo, pageSize);
		if (list.size() == 0) {
			res.addMessage("No record Found.");
		} else {
			// res.addResult("List", list);
			res.addData(list);
		}
		return res;
	}

	@Autowired
	public AttachmentServiceInt attachementService;

	@RequestMapping(value = "profilePic/{userId}")
	public ORSResponse uploadPic(@PathVariable Long userId, @RequestParam("file") MultipartFile file) {
		System.out.println("progilePic calling==>>>>>>>>>");
		UserDTO dto = baseService.findByPk(userId);
		AttachmentDTO doc = new AttachmentDTO(file);
		doc.setDescription("profilePic");
		doc.setId(userId);
		if (dto.getImageId() != null && dto.getImageId() > 0) {
			doc.setId(dto.getImageId());
		}
		Long imageId = attachementService.save(doc);
		if (dto.getImageId() == null || dto.getImageId() == 0) {
			dto.setImageId(imageId);
			baseService.update(dto);
		}
		ORSResponse res = new ORSResponse(true);
		res.setSuccess(true);
		res.addResult("imageId", imageId);
		return res;
	}

}
